// <auto-generated />
using EShop.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EShop.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250220212841_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EShop.API.Models.BaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EShop.API.Models.DeviceComponent", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.HasKey("DeviceId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("DeviceComponents");
                });

            modelBuilder.Entity("EShop.API.Models.Manufacturers.ManufacturerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.ComponentStockCountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComponentStockCounts", (string)null);
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.DeviceStockCountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeviceStockCounts", (string)null);
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.LiquidStockCountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("LiquidId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LiquidId");

                    b.HasIndex("ProductId");

                    b.ToTable("LiquidStockCounts", (string)null);
                });

            modelBuilder.Entity("EShop.API.Models.Components.ComponentModel", b =>
                {
                    b.HasBaseType("EShop.API.Models.BaseModel");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("EShop.API.Models.Devices.DeviceModel", b =>
                {
                    b.HasBaseType("EShop.API.Models.BaseModel");

                    b.Property<int>("Guarantee")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPower")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("EShop.API.Models.Liquids.LiquidModel", b =>
                {
                    b.HasBaseType("EShop.API.Models.BaseModel");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VGPG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.ToTable("Liquids", (string)null);
                });

            modelBuilder.Entity("EShop.API.Models.BaseModel", b =>
                {
                    b.HasOne("EShop.API.Models.Manufacturers.ManufacturerModel", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("EShop.API.Models.DeviceComponent", b =>
                {
                    b.HasOne("EShop.API.Models.Components.ComponentModel", "Component")
                        .WithMany("CompatibleDevices")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.API.Models.Devices.DeviceModel", "Device")
                        .WithMany("CompatibleComponents")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.ComponentStockCountModel", b =>
                {
                    b.HasOne("EShop.API.Models.Components.ComponentModel", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.API.Models.Components.ComponentModel", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Component");
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.DeviceStockCountModel", b =>
                {
                    b.HasOne("EShop.API.Models.Devices.DeviceModel", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.API.Models.Devices.DeviceModel", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EShop.API.Models.StockCounts.LiquidStockCountModel", b =>
                {
                    b.HasOne("EShop.API.Models.Liquids.LiquidModel", "Liquid")
                        .WithMany("StockCount")
                        .HasForeignKey("LiquidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.API.Models.Liquids.LiquidModel", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Liquid");
                });

            modelBuilder.Entity("EShop.API.Models.Devices.DeviceModel", b =>
                {
                    b.HasOne("EShop.API.Models.BaseModel", null)
                        .WithOne()
                        .HasForeignKey("EShop.API.Models.Devices.DeviceModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.API.Models.Liquids.LiquidModel", b =>
                {
                    b.HasOne("EShop.API.Models.BaseModel", null)
                        .WithOne()
                        .HasForeignKey("EShop.API.Models.Liquids.LiquidModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.API.Models.Components.ComponentModel", b =>
                {
                    b.Navigation("CompatibleDevices");
                });

            modelBuilder.Entity("EShop.API.Models.Devices.DeviceModel", b =>
                {
                    b.Navigation("CompatibleComponents");
                });

            modelBuilder.Entity("EShop.API.Models.Liquids.LiquidModel", b =>
                {
                    b.Navigation("StockCount");
                });
#pragma warning restore 612, 618
        }
    }
}
